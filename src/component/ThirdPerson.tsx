/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 Heroine.gltf -t -k -s -d
*/

import * as THREE from 'three'
import { Group } from 'three'
import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame, Vector3 } from '@react-three/fiber'
import { GLTF } from 'three-stdlib'

// import { GLTFLoader } from "/src/script/three/examples/jsm/loaders/GLTFLoader.js";

const MODEL_PATH = "./data/gltf/Heroine/Heroine.gltf"

type GLTFResult = GLTF & {
  nodes: {
    Scene001: THREE.SkinnedMesh
    Scene001_1: THREE.SkinnedMesh
    Scene001_2: THREE.SkinnedMesh
    Scene001_3: THREE.SkinnedMesh
    Scene001_4: THREE.SkinnedMesh
    Scene_1: THREE.SkinnedMesh
    Scene_2: THREE.SkinnedMesh
    Scene_3: THREE.SkinnedMesh
    Scene_4: THREE.SkinnedMesh
    Scene_5: THREE.SkinnedMesh
    Scene_6: THREE.SkinnedMesh
    Scene_7: THREE.SkinnedMesh
    Scene_8: THREE.SkinnedMesh
    Hair: THREE.SkinnedMesh
    J_Bip_C_Hips: THREE.Bone
  }
  materials: {
    N00_000_00_Body_00_SKIN__Instance_: THREE.MeshBasicMaterial
    N00_006_01_Shoes_01_CLOTH__Instance_: THREE.MeshBasicMaterial
    N00_000_00_HairBack_00_HAIR__Instance_: THREE.MeshBasicMaterial
    N00_007_01_Tops_01_CLOTH__Instance_: THREE.MeshBasicMaterial
    N00_001_03_Bottoms_01_CLOTH__Instance_: THREE.MeshBasicMaterial
    N00_000_00_FaceMouth_00_FACE__Instance_: THREE.MeshBasicMaterial
    N00_000_00_EyeIris_00_EYE__Instance_: THREE.MeshBasicMaterial
    N00_000_00_EyeHighlight_00_EYE__Instance_: THREE.MeshBasicMaterial
    N00_000_00_Face_00_SKIN__Instance_: THREE.MeshBasicMaterial
    N00_000_00_EyeWhite_00_EYE__Instance_: THREE.MeshBasicMaterial
    N00_000_00_FaceBrow_00_FACE__Instance_: THREE.MeshBasicMaterial
    N00_000_00_FaceEyelash_00_FACE__Instance_: THREE.MeshBasicMaterial
    N00_000_00_FaceEyeline_00_FACE__Instance_: THREE.MeshBasicMaterial
    N00_000_Hair_00_HAIR__Instance_: THREE.MeshBasicMaterial
  }
}

type ActionName = 'idle' | 'run' | 'TPose' | 'walk'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

type Props = {
  position: Vector3;
  rotation: [number, number];
  isMoving: boolean; // 移動状態を受け取る
};

export const ThirdPerson = React.memo(function ThirdPerson(props: Props) {
  const { position, rotation, isMoving } = props
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF(MODEL_PATH) as unknown as GLTFResult
  const { actions } = useAnimations(animations, group)
  const mixerRef = useRef<THREE.AnimationMixer | null>(null);

  useEffect(() => {
    if (group.current && actions) {
      const animationAction = actions['run'];
      const idleAction = actions['idle'];

      if (isMoving) {
        animationAction?.play();
        idleAction?.stop();
      } else {
        idleAction?.play();
        animationAction?.stop();
      }

      return () => {
        if (mixerRef.current) {
          mixerRef.current.stopAllAction();
        }
      };
    }
  }, [actions, isMoving]);

  useFrame((_, delta) => {
    if (mixerRef.current) {
      mixerRef.current.update(delta)
    }
  })

  return (
    <group {...props} position={position} rotation={new THREE.Euler(...rotation)} dispose={null}>
      <group name="Scene">
        <group ref={group as React.RefObject<Group>} name="Root">
          <primitive object={nodes.J_Bip_C_Hips} />
          <group name="Body">
            <skinnedMesh name="Scene001" geometry={nodes.Scene001.geometry} material-map={materials.N00_000_00_Body_00_SKIN__Instance_.map} skeleton={nodes.Scene001.skeleton} />
            <skinnedMesh name="Scene001_1" geometry={nodes.Scene001_1.geometry} material-map={materials.N00_006_01_Shoes_01_CLOTH__Instance_.map} skeleton={nodes.Scene001_1.skeleton} />
            <skinnedMesh name="Scene001_2" geometry={nodes.Scene001_2.geometry} material-map={materials.N00_000_00_HairBack_00_HAIR__Instance_.map} skeleton={nodes.Scene001_2.skeleton} />
            <skinnedMesh name="Scene001_3" geometry={nodes.Scene001_3.geometry} material-map={materials.N00_007_01_Tops_01_CLOTH__Instance_.map} skeleton={nodes.Scene001_3.skeleton} />
            <skinnedMesh name="Scene001_4" geometry={nodes.Scene001_4.geometry} material-map={materials.N00_001_03_Bottoms_01_CLOTH__Instance_.map} skeleton={nodes.Scene001_4.skeleton} />
          </group>
          <group name="Face">
            <skinnedMesh name="Scene_1" geometry={nodes.Scene_1.geometry} material-map={materials.N00_000_00_FaceMouth_00_FACE__Instance_.map} skeleton={nodes.Scene_1.skeleton} />
            <skinnedMesh name="Scene_2" geometry={nodes.Scene_2.geometry} material-map={materials.N00_000_00_EyeIris_00_EYE__Instance_.map} skeleton={nodes.Scene_2.skeleton} />
            <skinnedMesh name="Scene_3" geometry={nodes.Scene_3.geometry} material-map={materials.N00_000_00_EyeHighlight_00_EYE__Instance_.map} skeleton={nodes.Scene_3.skeleton} />
            <skinnedMesh name="Scene_4" geometry={nodes.Scene_4.geometry} material-map={materials.N00_000_00_Face_00_SKIN__Instance_.map} skeleton={nodes.Scene_4.skeleton} />
            <skinnedMesh name="Scene_5" geometry={nodes.Scene_5.geometry} material-map={materials.N00_000_00_EyeWhite_00_EYE__Instance_.map} skeleton={nodes.Scene_5.skeleton} />
            <skinnedMesh name="Scene_6" geometry={nodes.Scene_6.geometry} material-map={materials.N00_000_00_FaceBrow_00_FACE__Instance_.map} skeleton={nodes.Scene_6.skeleton} />
            <skinnedMesh name="Scene_7" geometry={nodes.Scene_7.geometry} material-map={materials.N00_000_00_FaceEyelash_00_FACE__Instance_.map} skeleton={nodes.Scene_7.skeleton} />
            <skinnedMesh name="Scene_8" geometry={nodes.Scene_8.geometry} material-map={materials.N00_000_00_FaceEyeline_00_FACE__Instance_.map} skeleton={nodes.Scene_8.skeleton} />
          </group>
          <skinnedMesh name="Hair" geometry={nodes.Hair.geometry} material-map={materials.N00_000_Hair_00_HAIR__Instance_.map} skeleton={nodes.Hair.skeleton} />
        </group>
      </group>
    </group>
  )
})

useGLTF.preload(MODEL_PATH)
